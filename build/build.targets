<?xml version="1.0"
			encoding="utf-8"?>

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

		<Import Project="$(MSBuildProjectDirectory)\build.props" />
		<Import Project="$(MSBuildProjectDirectory)\build.tasks" />

    <Import Project="$(MSBuildProjectDirectory)\smokeTests.targets" />
    <Import Project="$(MSBuildProjectDirectory)\elapsed-time.targets" />

    <UsingTask AssemblyFile="$(XunitExePath)"
               TaskName="Xunit.Runner.MSBuild.xunit" />

		<Target Name="Clean"
						BeforeTargets="Init">

				<RemoveDir Directories="$(ArtifactsPath)" />

		</Target>

		<Target Name="Init">

				<MakeDir Directories="$(ArtifactsPath)"
								 Condition="!Exists('$(ArtifactsPath)')" />

				<MakeDir Directories="$(AnalysisResultsPath)"
								 Condition="!Exists('$(AnalysisResultsPath)')" />

				<MakeDir Directories="$(PackageResultsPath)"
								 Condition="!Exists('$(PackageResultsPath)')" />

				<MakeDir Directories="$(TestResultsPath)"
								 Condition="!Exists('$(TestResultsPath)')" />

		</Target>

		<Target Name="PackageRestore"
            BeforeTargets="Build">

        <Exec Command="$(NugetExe) restore $(ProjectRoot)\$(ProjectName).sln" />

    </Target>

    <Target Name="EnsureDependencies"
            BeforeTargets="PackageRestore">

        <Error
            Text="NugetExe environment variable is not set"
            Condition="'$(NugetExe)' == ''" />
<!-- TODO
				<Error
						Text="NugetExe '$(NugetExe)' does not exist on the file system"
						Condition="! Exists('$(NugetExe)')" />
	-->
		</Target>

		<Target Name="FxCop"
						Condition="Exists('$(FxCopDir)')">

				<PropertyGroup>
						<BuildAnalysisPath>$(ProjectRoot)\build\analysis</BuildAnalysisPath>
						<FxCopCustomDictionaryFile>$(BuildAnalysisPath)\FxCop.CustomDictionary.xml</FxCopCustomDictionaryFile>
						<FxCopExe>$(FxCopDir)\FxCopCmd.exe</FxCopExe>
						<PlatformDir Condition="'$(PlatformDir)' == ''">c:\Windows\Microsoft.NET\Framework\v4.0.30319</PlatformDir>
						<FxCopOptions>/summary /successfile /searchgac</FxCopOptions>
						<FxCopReportFormat>$(FxCopDir)\Xml\FxCopReport.xsl</FxCopReportFormat>
						<FxCopAnalysisLogFile>$(AnalysisResultsPath)\FxCopReport.html</FxCopAnalysisLogFile>
						<AssemblyFiles>$(BuildDestinationDir)\Sitecore.Ship*.dll</AssemblyFiles>
				</PropertyGroup>

				<Message Text="FxCopDir is $(FxCopDir)" />

				<Exec
						Command="$(FxCopExe) /dictionary:$(FxCopCustomDictionaryFile) /out:$(FxCopAnalysisLogFile) /outxsl:$(FxCopReportFormat) $(FxCopOptions) /platform:$(PlatformDir) /file:$(AssemblyFiles) /rulesetdirectory:&quot;$(FxCopDir)\..\Rule Sets&quot; /rule:+$(FxCopDir)\Rules"
						WorkingDirectory="$(FxCopDir)"/>

		</Target>

		<ItemGroup>
				<!-- Apply versioning to src\Common\*.cs files - should only be applied on CI server -->

				<RegexTransform Include="$(ProjectRoot)\src\Common\CommonVersionInfo.cs">
						<Find>AssemblyVersion\("\d+\.\d+\.\d+"\)</Find>
						<ReplaceWith>AssemblyVersion("$(Version)")</ReplaceWith>
				</RegexTransform>

				<RegexTransform Include="$(ProjectRoot)\src\Common\CommonVersionInfo.cs">
						<Find>AssemblyFileVersion\("\d+\.\d+\.\d+\.\d+"\)</Find>
						<ReplaceWith>AssemblyFileVersion("$(FileVersion)")</ReplaceWith>
				</RegexTransform>

				<RegexTransform Include="$(ProjectRoot)\src\Common\CommonVersionInfo.cs">
						<Find>AssemblyInformationalVersion\("\d+\.\d+\.\d+"\)</Find>
						<ReplaceWith>AssemblyInformationalVersion("$(ProductVersion)")</ReplaceWith>
				</RegexTransform>

		</ItemGroup>

		<Target Name="UpdateVersion"
						BeforeTargets="Build">

				<RegexTransform Items="@(RegexTransform)" />

		</Target>

		<Target Name="ValidateVersionInfo"
						BeforeTargets="ReportVersionInfo">

			<Error Text="MajorVersion environment variable is not set"
						 Condition="$(MajorVersion) == ''" />

			<Error Text="MinorVersion environment variable is not set"
						 Condition="$(MinorVersion) == ''" />

			<Error Text="PatchVersion environment variable is not set"
						 Condition="$(PatchVersion) == ''" />

			<Error Text="Revision environment variable is not set"
						 Condition="$(Revision) == ''" />

			<Error Text="SHA environment variable is not set"
						 Condition="$(SHA) == ''" />

		</Target>

		<Target Name="ReportVersionInfo">

			<Message Text="Build Version"
							 Importance="High" />

			<Message Text="MajorVersion   : '$(MajorVersion)'" />
			<Message Text="MinorVersion   : '$(MinorVersion)'" />
			<Message Text="PatchVersion   : '$(PatchVersion)'" />
			<Message Text="Revision       : '$(Revision)'" />
			<Message Text="SHA            : '$(SHA)'" />
			<Message Text="PRERELEASE     : '$(PRERELEASE)'" />

			<Message Text="Assembly Versioning"
							 Importance="High" />

			<Message Text="ProductVersion : '$(ProductVersion)' -  AssemblyInformationalVersion" />
			<Message Text="FileVersion    : '$(FileVersion)' - AssemblyFileVersion" />
			<Message Text="Version        : '$(Version)' - AssemblyVersion" />

			<Message Text="NuGet Package Versioning"
							 Importance="High" />

			<Message Text="PackageVersion : '$(PackageVersion)'" />

			<Message Text="Build Environment"
							 Importance="High" />

      		<Message Text="TestWebsiteUrl           : '$(TestWebsiteUrl)'" />
      		<Message Text="TestWebsitePath          : '$(TestWebsitePath)'" />
		</Target>

		<Target Name="RunUnitTests">

				<ItemGroup>
						<TestAssemblies Include="$(ProjectRoot)\test\unit-test\**\bin\$(Configuration)\*.Test.dll" />
				</ItemGroup>

        <!-- TODO ensure test assemblies count > 0 -->
				<xunit Assemblies="@(TestAssemblies)"
							 Xml="$(OutputXmlFile)"
							 NoLogo="true" />

		</Target>

		<Target Name="StdPackage">

				<ItemGroup>
						<NuspecFiles Include="$(PackagingPath)\*.nuspec" />
				</ItemGroup>

				<Exec Command="$(NugetExe) pack %(NuspecFiles.Identity) -Verbosity detailed -Version $(PackageVersion) -OutputDirectory $(PackageResultsPath)" />

		</Target>

		<Target Name="IntegrationTests"
						AfterTargets="StdPackage">

				<ItemGroup>
						<IntegrationTestAssemblies
							Include="$(ProjectRoot)\test\integration-test\**\bin\$(Configuration)\*Integration.Test.dll"
							Exclude="$(ProjectRoot)\test\unit-test\**\*.Test.dll"/>
				</ItemGroup>

				<PropertyGroup>
						<IntegrationTestResults>$(TestResultsPath)\TestResults.Integration.xml</IntegrationTestResults>
				</PropertyGroup>

				<xunit Assemblies="@(IntegrationTestAssemblies)"
							 Xml="$(IntegrationTestResults)"
							 NoLogo="true" />

    </Target>

    <!-- CI Build Integration Targets - Version, Build, Test, Analyze, Package -->

    <Target Name="Version"
            BeforeTargets="Init">

        <CallTarget Targets="ReportVersionInfo" />

    </Target>

    <Target Name="Build"
            DependsOnTargets="Init" >

        <Message Text="Project Root = $(ProjectRoot)" />

				<MSBuild Projects="$(ProjectRoot)\$(ProjectName).sln"
								 Targets="Build"
								 Properties="Configuration=$(Configuration)" />

				<ItemGroup>
						<Net45Libs Include="$(ProjectRoot)\src\*\bin\$(Configuration)\*.dll; $(ProjectRoot)\src\*\bin\$(Configuration)\*.pdb;" />
				</ItemGroup>

				<Copy SourceFiles="@(Net45Libs)"
							DestinationFolder="$(BuildDestinationDir)"
							SkipUnchangedFiles="True" />

		</Target>

		<Target Name="Test">

				<CallTarget Targets="RunUnitTests" />

		</Target>

		<Target Name="Analyze">

				<CallTarget Targets="FxCop" />

		</Target>

		<Target Name="Package">

				<CallTarget Targets="StdPackage" />

		</Target>

		<Target Name="Full"
						DependsOnTargets="Build; Test; Analyze; Package">

						<!-- Fire dependencies to initiate a full -->

		</Target>

</Project>